### Основн. математические операторы
# + Сложение
# - Вычитание
# * Умножение
# / Деление (прямой слеш)

# Операции выполняются по очереди (по приоритету)
# Очередность // приоритет можно изменить с помощью скобок

# print('Пример')
# print(((5+30)*20)/15)

### Переменные
## переменная обозначает именованное место для хранения данных

# fred = 200
# miha = fred
# print(miha)

# print('Пример')
# number_of_coins = 250
# print(number_of_coins)

## имена переменных не могут начинаться с цифры
# found_coins = 20
# magic_coins = 10
# stolen_coins = 3
# print (found_coins + magic_coins * 365 - stolen_coins * 52)

### Строки
# Строка - исп. для вывода текста
# В списках, кортежах и словарях можно хранить наборы значений

# fred = 'Почему у горилл большие ноздри? Потому что у них толстые пальцы!'
# print(fred)

## Строку можно записать в одинарных '---' или двойных "---" кавычках
## Если нужно ввести текст, занимающий несколько строк, поставьте в начале и в конце три одинарные кавычки

# print('Пример')
# fred = '''Что едят на полдник динозавры? 
# ТиРекс-кекс!'''
# print(fred)

### Single Quote // Double Quoute
# \ - символ экранирования, если нужно записать строку в двойных или одинарных кавычках
# print('Пример')
# single_quote_str = '"Тут что-то не так, не будь я д\'Артаньян", - подумал он.'
# double_quote_str = "\"Тут что-то не так, не будь я д'Артаньян\", - подумал он."
# print(single_quote_str)
# print(double_quote_str)

### Переменные внутри строк
## Исп. %s для печатати строк, содержащих значения переменных
# print('Пример:')
# myscore = 1000
# message = 'Мой счет: %s очков'
# print(message % myscore) # на место %s подставляется % = значению из myscore
## Исп. %s для можно подставлять различные переменные
# print('Пример:')
# joke_text = '%s: приспособление для поиска мебели в темноте'
# bodypart1 = 'Коленка'
# bodypart2 = 'Лодыжка'
# print(joke_text % bodypart1)
# print(joke_text % bodypart2)
## Исп. нескольких %s меток в одной строке
# print('Пример:')
# nums = 'Что сказало число %s числу %s? Славный поясок!'
# print(nums % (0, 8))
## Если исп. несколько меток, то значения для подстановки указываются в скобках


### Умножение строк
# print('Пример:')
# print(10*'a')
# print('Пример2:')
# spaces = ' ' * 25
# print('%s Задний переулок 12' % spaces)
# print('%s Трясогузочья пустошь' % spaces)
# print('%s Западный Всхрапшир' % spaces)
# print()
# print()
# print('Уважаемый Сэр,')
# print()
# print('Хочу сообщить вам, что кое-где на крыше уборной')
# print('недостает кусков черепицы.')
# print('Думаю, прошлой ночью их сдуло внезапным порывом ветра.')
# print()
# print('С почтением')
# print('Малькольм Конфузли')


### Списки мощнее строк (РАБОТА С ИНДЕКСОМ)
# print('Пример_строки:')
# wizard_list = 'Паучьи лапки, жабий палец, глаз тритона, крыло летучей мыши, жир слизня, перхоть змеи'
# print(wizard_list)
# print('Пример_списка:')
# wizard_list = ['паучьи лапки', 'жабий палец', 'глаз тритона', 'крыло летучей мыши', 'жир слизня', 'перхоть змеи']
# print(wizard_list)
## список позволяет обращаться к его элементам по отдельности
# print('Пример')
# print(wizard_list[2])
## В скобках стоит 2, но выводится третий элемент из списка
## Отсчет элементов в списках начинается с нуля!
## Замена элементов из списка
# print('Пример:')
# wizard_list[2] = 'язык улитки'
# print(wizard_list)
## Отображение части элементов из списка
# print('Пример: Выведем на экран элементы с третьего до пятый')
# print(wizard_list[2:5])
# [2:5] означает «показать элементы, начиная с индекса 2 до 5 (не включая его)», т.е. элементы 2,3,4
## В списках можно хранить значения разных типов, например числа
# print('Пример №1: список содержащий числа')
# some_numbers = [1, 2, 5, 10, 20]
# print(some_numbers)
# Только строки
# print('Пример №2: список содержащий строки')
# some_strings = ['Нож', 'отточен', 'точен', 'очень']
# print(some_strings)
# Числа и строки
# print('Пример №3: список содержащий числа и строки')
# numbers_and_strings = [7, 'раз', 'отпей', 1, 'раз', 'отъешь']
# print(numbers_and_strings)
# Списки в списках!
# print('Пример №4: список содержащий другие списки')
# numbers = [1, 2, 3, 4, 5]
# strings = ['хватит', 'циферки', 'считать']
# mylist = [numbers, strings]
# print(mylist)

### Добавление элементов в список служит функция append
# wizard_list.append('медвежий коготь')
# print(wizard_list)

### Удаление элементов из списка c помощью команды del
# print('Пример:')
# del wizard_list[5]
# print(wizard_list)

### Списковая арифметика - возможность объядинять списки
# print('Пример:')
# list1 = [1, 2, 3, 4, 5]
# list2 = ['я', 'забрался', 'под', 'кровать']
# print(list1 + list2)
# print('Результат сложения двух списков можно поместить в другую переменную:')
# list1 = [1, 2, 3, 4]
# list2 = ['я', 'мечтаю', 'о', 'пломбире']
# list3 = list1 + list2
# print(list3)

## можно умножить список на число с помощью оператора (*)
# print('Пример:')
# list1 = [1, 2]
# print(list1 * 5)
## деление и вычитание со списками НЕ РАБОТАЮТ

## Кортеж похож на список, элементы которого записаны в круглых скобках
# print('Пример:')
# fibs = (0, 1, 1, 2, 3)
# print(fibs[3])
## Кортеж НЕВОЗМОЖНО изменить после его создания

### Словарями в Python называются наборы значений аналогично спискам и кортежам
### Отличие состоит в том, что каждому элементу словаря соответствуют ключ и связанное с ним значение
### Ключ уникальный, а его значение нет
# print('Пример:')
# favorite_sports = {'Ральф Уильямс': 'Футбол',
# 'Майкл Типпетт': 'Баскетбол',
# 'Эдвард Элгар': 'Бейсбол',
# 'Ребекка Кларк': 'Нетбол',
# 'Этель Смит': 'Бадминтон',
# 'Фрэнк Бридж': 'Регби'}
# print(favorite_sports['Ребекка Кларк'])
# print('Пример:')
# del favorite_sports['Этель Смит']
# print(favorite_sports)

### Ключ нужен для замены значения в словаре
# print('Пример:')
# favorite_sports['Ральф Уильямс'] = 'Хоккей на льду' # заменили любимый спорт Ральфа
# print(favorite_sports)
### Словари НЕЛЬЗЯ объединить

### Упражнения
#1. Любимые вещи
# Создайте список своих любимых развлечений и сохраните его в переменной games.
# Теперь создайте список любимых лакомств, сохранив его в переменной foods.
# Объедините два этих списка, сохранив результат в переменной favorites.
# Напечатайте значение этой переменной.
goodgames = ['LineAge 2', 'Dragon Age: Origins', 'TESV: Skyrim', 'Diablo 2-3', 'Witcher 2-3']
print(goodgames)
goodfood = ['Чизбургер', 'Спагетти', 'Оливье', 'Жульен','Pizza']
print(goodfood)
favorites = (goodgames+goodfood)
print(favorites)